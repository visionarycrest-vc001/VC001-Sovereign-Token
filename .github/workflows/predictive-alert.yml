name: üîÆ Predictive Alert System

on:
  schedule:
    # Run predictive analysis every 6 hours
    - cron: '0 */6 * * *'
  
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of predictive analysis'
        required: false
        type: choice
        options:
          - 'grant_trends'
          - 'system_health'
          - 'token_economics'
          - 'all'
        default: 'all'

jobs:
  predictive-analysis:
    runs-on: ubuntu-latest
    name: üîÆ Predictive System Analysis
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üîß Install Dependencies
        run: npm ci
        
      - name: üìä Collect Historical Data
        run: |
          echo "üìä Collecting historical data for analysis..."
          
          # Create analysis data directory
          mkdir -p analysis/data
          
          # Collect grant trend data
          if [ -d "data/grants" ]; then
            echo "Analyzing grant trends..."
            
            # Count grants by date
            cat > analysis/data/grant-trends.json << EOF
          {
            "collection_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "total_grants": $(find data/grants -name "*.json" -type f | wc -l),
            "pending_grants": $(find data/grants -name "*.json" -exec grep -l '"status": "pending"' {} \; | wc -l),
            "approved_grants": $(find data/grants -name "*.json" -exec grep -l '"status": "approved"' {} \; | wc -l),
            "minted_grants": $(find data/grants -name "*.json" -exec grep -l '"status": "minted"' {} \; | wc -l),
            "sectors": {
              "FDA": $(find data/grants -name "*.json" -exec grep -l '"sector": "FDA"' {} \; | wc -l),
              "EDA": $(find data/grants -name "*.json" -exec grep -l '"sector": "EDA"' {} \; | wc -l),
              "SAM": $(find data/grants -name "*.json" -exec grep -l '"sector": "SAM"' {} \; | wc -l)
            }
          }
          EOF
          fi
          
          # Collect system health data
          echo "Analyzing system health..."
          cat > analysis/data/system-health.json << EOF
          {
            "collection_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "files": {
              "grants": $(find data/grants -name "*.json" -type f | wc -l),
              "glyphs": $(find data/glyphs -name "*.json" -type f | wc -l),
              "ledger": $(find data/ledger -name "*.json" -type f | wc -l),
              "messages": $(find messages -name "*.json" -type f | wc -l)
            },
            "message_health": {
              "signed_messages": $(find messages -name "*.signed.json" -type f | wc -l),
              "unsigned_messages": $(find messages -name "*.json" -type f ! -name "*.signed.json" | wc -l)
            }
          }
          EOF
          
          # Collect token economics data
          echo "Analyzing token economics..."
          TOTAL_LTOKENS=0
          if [ -d "data/ledger" ]; then
            for file in data/ledger/*.json; do
              if [ -f "$file" ]; then
                TYPE=$(jq -r '.type' "$file" 2>/dev/null || echo "unknown")
                AMOUNT=$(jq -r '.amount' "$file" 2>/dev/null || echo "0")
                if [ "$TYPE" = "mint" ]; then
                  TOTAL_LTOKENS=$(echo "$TOTAL_LTOKENS + $AMOUNT" | bc -l 2>/dev/null || echo "$TOTAL_LTOKENS")
                fi
              fi
            done
          fi
          
          cat > analysis/data/token-economics.json << EOF
          {
            "collection_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "ltoken_supply": $TOTAL_LTOKENS,
            "transaction_count": $(find data/ledger -name "*.json" -type f | wc -l),
            "glyph_count": $(find data/glyphs -name "*.json" -type f | wc -l)
          }
          EOF
          
      - name: üîÆ Perform Predictive Analysis
        id: analysis
        run: |
          echo "üîÆ Performing predictive analysis..."
          
          ALERTS=""
          ALERT_LEVEL="info"
          
          # Analyze grant trends
          TOTAL_GRANTS=$(jq -r '.total_grants' analysis/data/grant-trends.json)
          PENDING_GRANTS=$(jq -r '.pending_grants' analysis/data/grant-trends.json)
          
          if [ "$TOTAL_GRANTS" -gt 0 ]; then
            PENDING_RATIO=$(echo "scale=2; $PENDING_GRANTS / $TOTAL_GRANTS" | bc -l)
            
            if (( $(echo "$PENDING_RATIO > 0.8" | bc -l) )); then
              ALERTS="${ALERTS}\n- ‚ö†Ô∏è High pending grant ratio: ${PENDING_RATIO} (>80%)"
              ALERT_LEVEL="warning"
            fi
            
            if [ "$PENDING_GRANTS" -gt 50 ]; then
              ALERTS="${ALERTS}\n- üö® Large pending grant backlog: $PENDING_GRANTS grants"
              ALERT_LEVEL="critical"
            fi
          fi
          
          # Analyze system health
          UNSIGNED_MESSAGES=$(jq -r '.message_health.unsigned_messages' analysis/data/system-health.json)
          if [ "$UNSIGNED_MESSAGES" -gt 10 ]; then
            ALERTS="${ALERTS}\n- ‚ö†Ô∏è Many unsigned GSL messages: $UNSIGNED_MESSAGES"
            if [ "$ALERT_LEVEL" = "info" ]; then
              ALERT_LEVEL="warning"
            fi
          fi
          
          # Analyze token economics
          GLYPH_COUNT=$(jq -r '.glyph_count' analysis/data/token-economics.json)
          TRANSACTION_COUNT=$(jq -r '.transaction_count' analysis/data/token-economics.json)
          
          if [ "$GLYPH_COUNT" -gt 0 ] && [ "$TRANSACTION_COUNT" -gt 0 ]; then
            TX_PER_GLYPH=$(echo "scale=2; $TRANSACTION_COUNT / $GLYPH_COUNT" | bc -l)
            
            if (( $(echo "$TX_PER_GLYPH < 1.5" | bc -l) )); then
              ALERTS="${ALERTS}\n- üìä Low L-Token activity: $TX_PER_GLYPH transactions per glyph"
            fi
          fi
          
          # Store results
          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "alerts<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ALERTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Analysis complete. Alert Level: $ALERT_LEVEL"
          
      - name: üìà Generate Predictions
        run: |
          echo "üìà Generating system predictions..."
          
          # Simple trend analysis
          TOTAL_GRANTS=$(jq -r '.total_grants' analysis/data/grant-trends.json)
          PENDING_GRANTS=$(jq -r '.pending_grants' analysis/data/grant-trends.json)
          
          # Predict processing time
          if [ "$PENDING_GRANTS" -gt 0 ]; then
            # Assume 1 grant processed per hour during business hours
            PROCESSING_HOURS=$(echo "$PENDING_GRANTS * 1" | bc)
            PROCESSING_DAYS=$(echo "scale=1; $PROCESSING_HOURS / 8" | bc)
            
            echo "üìä Processing Predictions:"
            echo "  Estimated processing time: $PROCESSING_DAYS business days"
            echo "  Current backlog: $PENDING_GRANTS grants"
          fi
          
          # Predict token supply growth
          CURRENT_SUPPLY=$(jq -r '.ltoken_supply' analysis/data/token-economics.json)
          if [ "$PENDING_GRANTS" -gt 0 ]; then
            # Estimate future token allocation (assuming average 1000 L-tokens per grant)
            PROJECTED_TOKENS=$(echo "$PENDING_GRANTS * 1000" | bc)
            FUTURE_SUPPLY=$(echo "$CURRENT_SUPPLY + $PROJECTED_TOKENS" | bc)
            
            echo "üí∞ Token Supply Predictions:"
            echo "  Current supply: $CURRENT_SUPPLY L-tokens"
            echo "  Projected from pending: $PROJECTED_TOKENS L-tokens"
            echo "  Future total supply: $FUTURE_SUPPLY L-tokens"
          fi
          
      - name: üö® Generate Alert Report
        if: steps.analysis.outputs.alert_level != 'info'
        run: |
          echo "üö® Generating alert report..."
          
          cat > predictive-alert-report.md << EOF
          ## üîÆ Predictive Alert Report - $(date)
          
          ### Alert Level: ${{ steps.analysis.outputs.alert_level }}
          
          ### Detected Issues
          ${{ steps.analysis.outputs.alerts }}
          
          ### System Metrics
          - **Total Grants**: $(jq -r '.total_grants' analysis/data/grant-trends.json)
          - **Pending Grants**: $(jq -r '.pending_grants' analysis/data/grant-trends.json)
          - **Active Glyphs**: $(jq -r '.glyph_count' analysis/data/token-economics.json)
          - **L-Token Supply**: $(jq -r '.ltoken_supply' analysis/data/token-economics.json)
          
          ### Recommended Actions
          $(if [ "${{ steps.analysis.outputs.alert_level }}" = "critical" ]; then
            echo "- üö® **Immediate attention required**"
            echo "- Scale up grant processing capacity"
            echo "- Review system bottlenecks"
          elif [ "${{ steps.analysis.outputs.alert_level }}" = "warning" ]; then
            echo "- ‚ö†Ô∏è **Monitor closely**"
            echo "- Consider process optimization"
            echo "- Schedule maintenance if needed"
          fi)
          
          ### Predictions
          - Grant processing backlog clearance: $(echo "scale=1; $(jq -r '.pending_grants' analysis/data/grant-trends.json) / 8" | bc) business days
          - Token supply growth: $(echo "$(jq -r '.pending_grants' analysis/data/grant-trends.json) * 1000" | bc) L-tokens pending
          
          ---
          *Report generated automatically by Predictive Alert System*
          EOF
          
      - name: üéØ Create Alert Issue
        if: steps.analysis.outputs.alert_level == 'critical'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Critical System Alert - Predictive Analysis',
              body: `## üîÆ Critical Alert Detected
              
              The predictive analysis system has detected critical issues that require immediate attention.
              
              ### Alert Details
              ${{ steps.analysis.outputs.alerts }}
              
              ### Alert Level: CRITICAL
              
              ### Immediate Actions Required
              - Review system performance
              - Scale processing capacity
              - Address identified bottlenecks
              
              See the predictive alert report artifact for detailed analysis.
              
              This issue was automatically created by the Predictive Alert System.`,
              labels: ['critical', 'predictive-alert', 'needs-immediate-attention']
            });
            
      - name: üìä Archive Analysis Data
        run: |
          echo "üìä Archiving analysis data..."
          
          # Create timestamped archive
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          mkdir -p analysis/archive
          
          cp -r analysis/data "analysis/archive/data_$TIMESTAMP"
          
          # Keep only last 30 archived datasets
          find analysis/archive -name "data_*" -type d | sort -r | tail -n +31 | xargs rm -rf
          
      - name: üì§ Commit Analysis Results
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Predictive Analysis Bot"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add analysis/
            git add predictive-alert-report.md
            git commit -m "üîÆ Predictive analysis - Alert Level: ${{ steps.analysis.outputs.alert_level }} - $(date)"
            git push
          else
            echo "No analysis changes to commit"
          fi
          
      - name: üìä Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: predictive-analysis
          path: |
            analysis/data/
            predictive-alert-report.md
          retention-days: 90